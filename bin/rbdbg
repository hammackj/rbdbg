#!/usr/bin/env ruby
# encoding: utf-8

# rbdbg - rbdbg is a console debugger for Windows/OSX/Linux, primarily designed for automation.
# Jacob Hammack <jacob.hammack@hammackj.com>
# http://www.hammackj.com
#
#
# hammackj - 01-04-2011 - Version 0.0.1

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '/../lib'))

$stdout.sync = true
$stderr.sync = true

require 'rubygems'
require 'rbdbg'

module RbDbg
	
	# Rbdbg's Main application class
	#
	# @author Jacob Hammack
	class Application
		
		# Creates a new instance of the Application Class
		#
		def initialize
		end
		
		# Main Method of the Application class, handles command line arguments and starts the application
		#
		def main
			opts = OptionParser.new do |opt|
				opt.banner =	"#{APP_NAME} v#{VERSION}\nJacob Hammack\nhttp://www.hammackj.com\n\n"
				opt.banner << "Usage: #{APP_NAME} [options] "
				opt.separator('')

				opt.on('-a', '--attach PID', "Attaches the debugger to the specified PID") do |option|
					dbg = RbDbg::Debugger::OSX::OSXDebugger.new option
					dbg.print_registers option
				end
				
				opt.on('--enumerate-processes', "Enumerates all of the processes that can be debugged") do |option|
					puts "Not Implemented yet"
				end

				opt.separator('')
				opt.separator('Other Options')
				
				opt.on_tail('-v', '--version', "Shows application version information") do
					puts "#{APP_NAME} - #{VERSION}"
					exit
				end

				opt.on_tail("-?", "--help", "Show this message") do
					puts opt.to_s + "\n"
					exit
				end
			end
			
			if ARGV.length != 0
				opts.parse!
			else
				puts opts.to_s + "\n"
				exit
			end
			
		end
	end
end

app = RbDbg::Application.new
app.main